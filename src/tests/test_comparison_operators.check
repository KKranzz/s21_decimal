#include "../s21_decimal.h"
#include <stdio.h>

#test test_is_less_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 1);

#test test_is_less_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 1);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 0);

#test test_is_less_different_scales
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.456");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_less_zero_vs_negative
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0.1");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 1);

#test test_is_less_equal_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_less_max_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950334");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 1);

#test test_is_less_positive_zero_vs_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_less_scale_overflow
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("1");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_less_subnormal_numbers
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("0");
    int result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 1);
    result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_less_big_numbers
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950334");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 0);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 1);

#test test_is_less_small_numbers
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000002");
    int result = s21_is_less(dig1, dig2);
    ck_assert_int_eq(result, 1);
    result = s21_is_less(dig2, dig1);
    ck_assert_int_eq(result, 0);

#test test_is_less_or_equal_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 0);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 1);

#test test_is_less_or_equal_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 0);

#test test_is_less_or_equal_equal_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_zero_cases
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("0");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_max_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950335");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_max_plus_one
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950334");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 0);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 1);

#test test_is_less_or_equal_small_numbers
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000002");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 0);

#test test_is_less_or_equal_different_scales
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.450");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_extreme_values
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950335");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 0);

#test test_is_less_or_equal_one_negative
    s21_decimal dig1 = s21_string_to_decimal("-1");
    s21_decimal dig2 = s21_string_to_decimal("1");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 0);

#test test_is_less_or_equal_same_value_diff_scale
    s21_decimal dig1 = s21_string_to_decimal("100");
    s21_decimal dig2 = s21_string_to_decimal("100.00");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_negative_small
    s21_decimal dig1 = s21_string_to_decimal("-0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("-0.0000000000000000000000000002");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 0);
    ck_assert_int_eq(s21_is_less_or_equal(dig2, dig1), 1);

#test test_is_less_or_equal_precision_loss
    s21_decimal dig1 = s21_string_to_decimal("0.9999999999999999999999999999");
    s21_decimal dig2 = s21_string_to_decimal("1.0000000000000000000000000000");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_less_or_equal_large_scale_diff
    s21_decimal dig1 = s21_string_to_decimal("1.0000000000000000000000000000");
    s21_decimal dig2 = s21_string_to_decimal("1.0000000000000000000000000001");
    ck_assert_int_eq(s21_is_less_or_equal(dig1, dig2), 1);

#test test_is_greater_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater(dig2, dig1), 0);

#test test_is_greater_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 0);
    ck_assert_int_eq(s21_is_greater(dig2, dig1), 1);

#test test_is_greater_different_scales
    s21_decimal dig1 = s21_string_to_decimal("123.456");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 1);

#test test_is_greater_zero_vs_negative
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0.1");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater(dig2, dig1), 0);

#test test_is_greater_equal_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 0);

#test test_is_greater_max_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950334");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater(dig2, dig1), 0);

#test test_is_greater_positive_zero_vs_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 0);

#test test_is_greater_scale_overflow
    s21_decimal dig1 = s21_string_to_decimal("1");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000001");
    ck_assert_int_eq(s21_is_greater(dig1, dig2), 1);

#test test_is_greater_or_equal_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 0);

#test test_is_greater_or_equal_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 0);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 1);

#test test_is_greater_or_equal_equal_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_greater_or_equal_zero_cases
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("0");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_greater_or_equal_max_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950335");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_greater_or_equal_small_numbers
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000002");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000001");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 0);

#test test_is_greater_or_equal_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_greater_or_equal_extreme_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000001");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 0);

#test test_is_greater_or_equal_one_negative
    s21_decimal dig1 = s21_string_to_decimal("1");
    s21_decimal dig2 = s21_string_to_decimal("-1");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 0);

#test test_is_greater_or_equal_same_value_diff_scale
    s21_decimal dig1 = s21_string_to_decimal("100.00");
    s21_decimal dig2 = s21_string_to_decimal("100");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_greater_or_equal_negative_small
    s21_decimal dig1 = s21_string_to_decimal("-0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("-0.0000000000000000000000000002");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);
    ck_assert_int_eq(s21_is_greater_or_equal(dig2, dig1), 0);

#test test_is_greater_or_equal_precision_loss
    s21_decimal dig1 = s21_string_to_decimal("1.0000000000000000000000000000");
    s21_decimal dig2 = s21_string_to_decimal("0.9999999999999999999999999999");
    ck_assert_int_eq(s21_is_greater_or_equal(dig1, dig2), 1);

#test test_is_equal_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.45");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-123.45");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("0");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_positive_zero_vs_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_small_numbers
    s21_decimal dig1 = s21_string_to_decimal("0.0000000000000000000000000001");
    s21_decimal dig2 = s21_string_to_decimal("0.0000000000000000000000000001");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_large_numbers
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950335");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_different_scales
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.450");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_equal_max_values
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950335");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);  // MAX == MAX

#test test_is_equal_diff_values
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 0);  // 123.45 != 67.89

#test test_is_equal_negative_numbers_different
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    int result = s21_is_equal(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_not_equal_positive_numbers
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_not_equal_negative_numbers
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_not_equal_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("0");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_not_equal_positive_zero_vs_negative_zero
    s21_decimal dig1 = s21_string_to_decimal("0");
    s21_decimal dig2 = s21_string_to_decimal("-0");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_not_equal_large_numbers
    s21_decimal dig1 = s21_string_to_decimal("79228162514264337593543950335");
    s21_decimal dig2 = s21_string_to_decimal("79228162514264337593543950334");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_not_equal_different_scales
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("123.450");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 0);

#test test_is_not_equal_diff_values
    s21_decimal dig1 = s21_string_to_decimal("123.45");
    s21_decimal dig2 = s21_string_to_decimal("67.89");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);

#test test_is_not_equal_negative_numbers_different
    s21_decimal dig1 = s21_string_to_decimal("-123.45");
    s21_decimal dig2 = s21_string_to_decimal("-67.89");
    int result = s21_is_not_equal(dig1, dig2);
    ck_assert_int_eq(result, 1);
