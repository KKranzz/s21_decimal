#include "../s21_decimal.h"
#include <check.h>
#include <stdio.h>



#test check_error_add_1
    s21_decimal val1 = s21_string_to_decimal("792281625142643375935439501.25");
    s21_decimal val2 = s21_string_to_decimal("0.545");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "792281625142643375935439501.8");
    ck_assert_int_eq(code, 0);

#test check_error_add_2
    s21_decimal val1 = s21_string_to_decimal("792281625142643375935439503.35");
    s21_decimal val2 = s21_string_to_decimal("792281625142643375935439501.8");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "1584563250285286751870879005.2");
    ck_assert_int_eq(code, 0);

#test check_error_add_3
    s21_decimal val1 = s21_string_to_decimal("-79228162514264337593543950335");
    s21_decimal val2 = s21_string_to_decimal("-1");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "0");
    ck_assert_int_eq(code, 2);
  
#test check_error_add_4
    s21_decimal val1 = s21_string_to_decimal("79228162514264337593543953");
    s21_decimal val2 = s21_string_to_decimal("0.49");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "79228162514264337593543953.49");
    s21_round(res, &res);
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "79228162514264337593543953");
    ck_assert_int_eq(code, 0);
    
#test check_error_add_5
    s21_decimal val1 = s21_string_to_decimal("792281625142643375935439503");
    s21_decimal val2 = s21_string_to_decimal("0.49");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    s21_floor(res, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_int_eq(code, 0);
    ck_assert_str_eq(buf, "792281625142643375935439503");

#test check_error_add_6
    s21_decimal val1 = s21_string_to_decimal("-792281625142643375935439503");
    s21_decimal val2 = s21_string_to_decimal("-0.49");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    s21_floor(res, &res);
     char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_int_eq(code, 0);
    ck_assert_str_eq(buf, "-792281625142643375935439504");

#test check_error_add_7
    s21_decimal val1 = s21_string_to_decimal("792281625142643375935439503");
    s21_decimal val2 = s21_string_to_decimal("0.66");
    s21_decimal res = s21_decimal_init();
    int code = s21_add(val1, val2, &res);
    s21_floor(res, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_int_eq(code, 0);
    ck_assert_str_eq(buf, "792281625142643375935439503");

#test check_error_add_9
    s21_decimal val1 = s21_string_to_decimal("7922816251426433759354395033");
    s21_decimal val2 = s21_string_to_decimal("0.45");
    s21_decimal res = s21_decimal_init();
    s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "7922816251426433759354395033.4");

#test check_error_add_10
    s21_decimal val1 = s21_string_to_decimal("1.4965478738678");
    s21_decimal res = s21_decimal_init();
    s21_round(val1, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "1");



#test check_error_add_15
    s21_decimal val1 = s21_string_to_decimal("59228162514264337593543950333");
    s21_decimal val2 = s21_string_to_decimal("0.5");
    s21_decimal res = s21_decimal_init();
    s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
    ck_assert_str_eq(buf, "59228162514264337593543950334");

#test check_error_add_16
    s21_decimal val1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_decimal val2 = s21_string_to_decimal("0.5");
    s21_decimal res = s21_decimal_init();
    s21_add(val1, val2, &res);
    char buf[30] = {0};
    s21_decimal_to_string(res, buf);
  
    ck_assert_str_eq(buf, "59228162514264337593543950334");


#test s21_number_is_correct_1
    s21_decimal val1 = s21_string_to_decimal("5922.816251426433.759354395033");
    char buf[32] = {0};
    s21_decimal_to_string(val1, buf);
    ck_assert_str_eq(buf, "0");

#test s21_number_is_correct_2
    s21_decimal val1 = s21_string_to_decimal("-.");
    char buf[32] = {0};
    s21_decimal_to_string(val1, buf);
    ck_assert_str_eq(buf, "0");

#test negate_1
    s21_decimal val1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_decimal* res = NULL;
    int code = s21_negate(val1, res);
    ck_assert_int_eq(code, 1);

#test show_bits_1
    s21_decimal val1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_show_bits(val1);

#test multiply_by_pow10_1
    s21_decimal val1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_big_decimal val1_big = s21_convert_to_big(val1);
    int code = s21_multiply_by_pow10(&val1_big, 29);
    ck_assert_int_eq(code, 1);

#test multiply_by_pow10_2
    s21_decimal part1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
    s21_decimal part2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
    s21_big_decimal val1_big ={{part1, part2}, 0,0};
    int code = s21_multiply_by_pow10(&val1_big, 10);
    ck_assert_int_eq(code, 1);

#test correct_pow_1
    s21_decimal part2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
    s21_big_decimal val1_big ={{part2, part2}, 30,0};
     s21_big_decimal val2_big ={{part2, part2}, 0,0};
    int code = s21_correct_pow(&val1_big, &val2_big);
    ck_assert_int_eq(code, 1);

#test add_mantissa_overflow
     s21_decimal part1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
     s21_decimal part2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
     s21_decimal zero = s21_decimal_init();
     s21_big_decimal val1_big ={{part1, part2}, 0,0};
     s21_big_decimal val2_big ={{part1, part2}, 0,0};
     s21_big_decimal res = {{zero, zero}, 0,0};
     int code = s21_add_mantissa(val1_big, val2_big, &res);
     ck_assert_int_eq(code, 1);

#test sub_mantissa_has_unused_borrow
     s21_decimal part1 = {{0x00000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
     s21_decimal part2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}};
     s21_decimal zero = s21_decimal_init();
     s21_big_decimal val1_big ={{part1, part2}, 0,0};
     s21_big_decimal val2_big ={{part2, part2}, 0,0};
     s21_big_decimal res = {{zero, zero}, 0,0};
     int code = s21_sub_mantissa(val1_big, val2_big, &res);
     ck_assert_int_eq(code, 2);

#test extra_mul
    s21_decimal part1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_decimal part2 = s21_string_to_decimal("1.0000000000000000000000000001");
    int code = s21_mul(part1, part2, &part2);
    char buf[31] = {0};
    s21_decimal_to_string(part2, buf);
    ck_assert_str_eq(buf, "59228162514264337593543950340");
    ck_assert_int_eq(code, 0);
    
#test get_bit_wrong_pos
    s21_decimal part1 = s21_decimal_init();
    s21_big_decimal val1 = {{part1, part1}, 0,0};
    int bit = s21_get_bit(val1, 300);
    ck_assert_int_eq(bit, 0);

#test show_dec_and_big_dec
    s21_decimal part1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_show_decimal(part1);
    s21_big_decimal val1_big = s21_convert_to_big(part1);
    s21_show_big_decimal(val1_big);

#test is_equal_diff_sign
    s21_decimal part1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_decimal part2 = s21_string_to_decimal("-1.0000000000000000000000000001");
    int code = s21_is_equal(part1, part2);
    ck_assert_int_eq(code, 0);

#test is_not_equal_diff_sign
    s21_decimal part1 = s21_string_to_decimal("59228162514264337593543950334");
    s21_decimal part2 = s21_string_to_decimal("-1.0000000000000000000000000001");
    int code = s21_is_not_equal(part1, part2);
    ck_assert_int_eq(code, 1);

#test from_int_to_decimal__1
    s21_decimal *part1 = NULL;
    int from = 4;
    int code = s21_from_int_to_decimal(from, part1);
    ck_assert_int_eq(code, 1);

#test from_decimal_to_int__1
    s21_decimal part1 = s21_string_to_decimal("59228162514264337593543950334");
    int *dst = NULL;
    int code = s21_from_decimal_to_int(part1, dst);
    ck_assert_int_eq(code, 1);

#test from_decimal_to_int__2
    s21_decimal part1 = s21_string_to_decimal("4294967290");
    int dst = 0;
    int code = s21_from_decimal_to_int(part1, &dst);
    ck_assert_int_eq(code, 1);

#test from_decimal_to_float__1
    s21_decimal part1 = s21_string_to_decimal("4294967290");
    float* dst = NULL;
    int code = s21_from_decimal_to_float(part1, dst);
    ck_assert_int_eq(code, 1);

#test truncate_1
    s21_decimal part1 = s21_string_to_decimal("0.5922816251426433759354395033");
    s21_truncate(part1, &part1);
    char buf[31] = {0};
    s21_decimal_to_string(part1, buf);
    ck_assert_str_eq(buf, "0");

#test truncate_2
    s21_decimal part1 = s21_string_to_decimal("-0.5922816251426433759354395033");
    s21_truncate(part1, &part1);
    char buf[31] = {0};
    s21_decimal_to_string(part1, buf);
    ck_assert_str_eq(buf, "-0");

#test from_float_to_decimal__1
    s21_decimal part1 = s21_decimal_init();
    float src = 0;
    int code = s21_from_float_to_decimal(src, &part1);
    ck_assert_int_eq(code, 0);

